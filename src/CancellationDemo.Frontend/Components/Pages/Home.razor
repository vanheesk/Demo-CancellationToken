@page "/"
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>Cancellation Demo</PageTitle>

<div class="container">
    <h1>Cancellation Demo</h1>

    @if (isProcessing)
    {
        <div class="alert alert-info">
            Processing...
            <button class="btn btn-warning" @onclick="CancelOperation">Cancel</button>
        </div>
    }
    else
    {
        <button class="btn btn-primary" @onclick="StartOperation" disabled="@(!isConnected)">Start Long Operation</button>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-@(success ? "success" : "danger")" role="alert">
            @message
        </div>
    }

    @if (!isConnected)
    {
        <div class="alert alert-warning" role="alert">
            Connecting to server...
        </div>
    }
</div>

@code {
    private bool isProcessing;
    private string message = "";
    private bool success = true;
    private CancellationTokenSource? cts;
    private bool isConnected;
    private bool isDisposed;

    protected override async Task OnInitializedAsync()
    {
        isConnected = true;
        await base.OnInitializedAsync();
    }

    private async Task StartOperation()
    {
        if (!isConnected || isDisposed) return;

        try
        {
            isProcessing = true;
            message = "";
            cts?.Dispose();
            cts = new CancellationTokenSource();

            using var client = HttpClientFactory.CreateClient("API");
            using var request = new HttpRequestMessage(HttpMethod.Get, "api/processing/longrunning");

            using var response = await client.SendAsync(request, cts.Token);

            if (!isDisposed)
            {
                if (response.IsSuccessStatusCode)
                {
                    success = true;
                    message = "Operation completed successfully!";
                }
                else if (response.StatusCode == (System.Net.HttpStatusCode)499)
                {
                    success = false;
                    message = "Operation was cancelled.";
                }
                else
                {
                    success = false;
                    message = $"Error: {response.StatusCode}";
                }
            }
        }
        catch (OperationCanceledException) when (!isDisposed)
        {
            success = false;
            message = "Operation was cancelled.";
        }
        catch (Exception ex) when (!isDisposed)
        {
            success = false;
            message = $"Error: {ex.Message}";
        }
        finally
        {
            if (!isDisposed)
            {
                isProcessing = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void CancelOperation()
    {
        if (!isDisposed)
        {
            cts?.Cancel();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (!isDisposed)
        {
            isDisposed = true;
            isConnected = false;
            cts?.Cancel();
            cts?.Dispose();
            cts = null;
        }
    }
}